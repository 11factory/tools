execute pathogen#infect()
set nocompatible " be iMproved 
set backspace=2		   " more powerful backspacing "
set background=light
syntax on
set incsearch        " Used for incremental searching "
set hlsearch         " Turns on highlighting for matched search patterns "
set number
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab
set ignorecase
set pastetoggle=<F6>
set laststatus=2
" Remove AG help usage on search results
let g:ag_mapping_message=0

" completion
au FileType * execute 'setlocal dictionary+=~/.vim/words/'.&filetype.'.dict'

" Tabs navigation
nnoremap <C-Left> :tabprevious
nnoremap <C-Right> :tabnext

"Ctrp + CTags
nnoremap <leader>. :CtrlPTag<cr>

"Reveal current buffer in NERDTree
map <leader>r :NERDTreeFind<cr>

" Ack current word
nmap <F7> "syiw:Ag! <c-r>s<CR>
imap <F7> <esc>"syiw:Ag! <c-r>s<CR>
vmap <F7> "sy:Ag! <c-r>s<CR>

" Replace selection prompt
nmap <leader>m :%s///gc<left><left><left>
" Run current spec file
nmap <leader>t :VimuxRunCommand 'SECRET_TOKEN=foo_bar bin/rspec ' . @%<CR>
" Run current javascript spec file
nmap <leader>j :VimuxRunCommand 'export SECRET_TOKEN=foo_bar; gulp test:e2e --watch --verbose --spec_path ' . @%<CR>
" Run rubocop for current file
nmap <leader>c :VimuxRunCommand 'rubocop -a ' . @%<CR>
" Close all tabs but current
nmap <leader>o :tabonly<CR>
" Tags window
nmap <F8> :TagbarToggle<CR> 

" Removing escape
ino jj <esc>  
cno jj <c-c>  
vno v <esc>

" Vundle
filetype off                  " required"

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required

" snipmate
Plugin 'MarcWeber/vim-addon-mw-utils'  
Plugin 'tomtom/tlib_vim'  
Plugin 'honza/vim-snippets'
Plugin 'garbas/vim-snipmate'

Plugin 'VundleVim/Vundle.vim'
Plugin 'bling/vim-airline'
Plugin 'benmills/vimux' " can call command on tmux pane via :VimuxRunCommand
Plugin 'Chiel92/vim-autoformat' " :Autoformat
Plugin 'mileszs/ack.vim'
Plugin 'rking/ag.vim' " fastest ack fork
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/cream-showinvisibles' " F4 to show invisibles
Plugin 'mattn/emmet-vim' " write html with abbr syntax
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'brendonrapp/smyck-vim'
Plugin 'godlygeek/csapprox'
Plugin 'tpope/vim-surround'
Plugin 'majutsushi/tagbar' " tags window (F8)
call vundle#end()            " required
filetype plugin indent on    " required


" ctrlp.vim configuration
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,tags     " MacOSX/Linux

" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" Ignore some folders and files for CtrlP indexing
let g:ctrlp_custom_ignore = {
  \ 'dir':  'node_modules$\|\.git$\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|data\|log\|tmp$',
  \ 'file': '\.exe$\|\.so$\|\.dat$'
  \ }


" vim-ruby configuration, dependency of syntastic
if !empty(matchstr(system('rbenv version'), 'jruby'))
  let g:ruby_path = system('rbenv which ruby')
endif

" Theme
so /Users/lcobos/.vimthemes/railscasts.vim

""""""""""""""""""""""""""""""""""""""""
" BACKUP / TMP FILES
""""""""""""""""""""""""""""""""""""""""
if isdirectory($HOME . '/.vim/backup') == 0  
    :silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif  
set backupdir-=.  
set backupdir+=.  
set backupdir-=~/  
set backupdir^=~/.vim/backup/  
set backupdir^=./.vim-backup/  
set backup

" Save your swp files to a less annoying place than the current directory.
" " If you have .vim-swap in the current directory, it'll use that.
" " Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0  
    :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif  
set directory=./.vim-swap//  
set directory+=~/.vim/swap//  
set directory+=~/tmp//  
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.vim/viminfo

if exists("+undofile")  
    " undofile - This allows you to use undos after exiting and restarting
    " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
    " :help undo-persistence
    " This is only present in 7.3+
    if isdirectory($HOME . '/.vim/undo') == 0
        :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
    endif
    set undodir=./.vim-undo//
    set undodir+=~/.vim/undo//
    set undofile
endif
